import os
from threading import Thread
from flask import Flask

import logging
from uuid import uuid4
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from docx import Document
from telegram import ReplyKeyboardMarkup, KeyboardButton

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –≤—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
TEMPLATE_PATH = "template.docx"
OUTPUT_DIR = "generated"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# –ü–æ–ª—è –¥–ª—è –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
FIELDS = [
    "contract_number",      # ‚Ññ –¥–æ–≥–æ–≤–æ—Ä—É
    "contract_date",        # –¥–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä—É
    "customer",             # –∑–∞–º–æ–≤–Ω–∏–∫
    "amount",               # —Å—É–º–∞
    "items_total_text"      # –≤—Å—å–æ–≥–æ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω—å —Ç–µ–∫—Å—Ç–æ–º
]

# –õ—é–¥—Å—å–∫—ñ –Ω–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ —ñ –ø—ñ–¥–∫–∞–∑–∫–∏
FIELD_PROMPTS = {
    "contract_number": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É (id.–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å.—Ä—ñ–∫.–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä—É):",
    "contract_date": "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É–∫–ª–∞–¥–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É (–ü—Ä–∏–∫–ª–∞–¥: 1 —Å—ñ—á–Ω—è 2025—Ä.):",
    "customer": "–í–≤–µ–¥—ñ—Ç—å –∑–∞–º–æ–≤–Ω–∏–∫–∞ (–ü—Ä–∏–∫–ª–∞–¥: –§–û–ü –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ–±–∞—Ç—å–∫–æ–≤—ñ):",
    "amount": "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É (–ü—Ä–∏–∫–ª–∞–¥: 4000,00):",
    "items_total_text": "–í—Å—å–æ–≥–æ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω—å (–ü—Ä–∏–∫–ª–∞–¥: —á–æ—Ç–∏—Ä–∏ —Ç–∏—Å—è—á—ñ):"
}

# –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö (text / number)
FIELD_TYPES = {
    "contract_number": "mixed",
    "contract_date": "text",
    "customer": "text",
    "amount": "number",
    "items_total_text": "text"
}




# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É ===
ASKING = 1

# === –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è Word ===
def replace_placeholders_in_paragraph(paragraph, mapping):
    text = paragraph.text
    for key, val in mapping.items():
        placeholder = f"{{{{{key}}}}}"
        if placeholder in text:
            text = text.replace(placeholder, val)
    if text != paragraph.text:
        for run in paragraph.runs:
            p = run._element
            p.getparent().remove(p)
        paragraph.add_run(text)

def replace_placeholders_in_docx(doc_path, mapping, output_path):
    doc = Document(doc_path)
    for p in doc.paragraphs:
        replace_placeholders_in_paragraph(p, mapping)
    for t in doc.tables:
        for row in t.rows:
            for cell in row.cells:
                for p in cell.paragraphs:
                    replace_placeholders_in_paragraph(p, mapping)
    doc.save(output_path)

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram ===
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()

    keyboard = [
        [KeyboardButton("–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫üìã")],
        [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏üî∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã\n"
        "–Ø —Å—Ç–≤–æ—Ä—é—é —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞ —à–∞–±–ª–æ–Ω–æ–º Word.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∞–±–æ –≤–∏–π—Ç–∏.",
        reply_markup=reply_markup
    )

async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()  # –æ—á–∏—â–∞—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    keyboard = [
        [KeyboardButton("–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫üìã")],
        [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏üî∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ '–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫'.",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


async def form_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["form_values"] = {}
    ctx.user_data["form_index"] = 0
    first_field = FIELDS[0]
    await update.message.reply_text(FIELD_PROMPTS[first_field])
    return ASKING

async def form_ask(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É "–°–∫–∞—Å—É–≤–∞—Ç–∏üî∏" —è–∫ —Ç–µ–∫—Å—Ç
    if text == "–°–∫–∞—Å—É–≤–∞—Ç–∏üî∏" or text.lower() in ["—Å–∫–∞—Å—É–≤–∞—Ç–∏", "–≤–∏–π—Ç–∏", "cancel", "stop"]:
        return await cancel(update, ctx)

    idx = ctx.user_data.get("form_index", 0)
    field = FIELDS[idx]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
    field_type = FIELD_TYPES.get(field, "text")

    if field_type == "number":
        import re
        if not re.match(r'^[0-9]+([.,][0-9]+)?$', text):
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ª–∏—à–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 4000,00):")
            return ASKING

    elif field_type == "text":
        # –¥–æ–∑–≤–æ–ª—è—î–º–æ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç, –∞–ª–µ –≤—ñ–¥–∫–∏–¥–∞—î–º–æ —á–∏—Å—Ç–æ —Ü–∏—Ñ—Ä–æ–≤—ñ —Ä—è–¥–∫–∏
        if text.replace(',', '').replace('.', '').isdigit():
            await update.message.reply_text("‚ö†Ô∏è –¶–µ –º–∞—î –±—É—Ç–∏ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return ASKING

    elif field_type == "mixed":
        import re
        # –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ü–∏—Ñ—Ä–∏, –±—É–∫–≤–∏, –∫—Ä–∞–ø–∫–∏, –¥–µ—Ñ—ñ—Å–∏ —ñ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
        if not re.match(r'^[0-9A-Za-z–ê-–Ø–∞-—è—ñ—ó—î–Ü–á–Ñ.\-_/]+$', text):
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –∫—Ä–∞–ø–∫–∏/–¥–µ—Ñ—ñ—Å–∏.")
            return ASKING

    # –ó–∞–ø–∏—Å—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑)
    ctx.user_data["form_values"][field] = text
    idx += 1

    if idx < len(FIELDS):
        ctx.user_data["form_index"] = idx
        next_field = FIELDS[idx]
        # --> –æ—Å—å —Ç—É—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥—Ä—É–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç –∑ FIELD_PROMPTS
        prompt = FIELD_PROMPTS.get(next_field, f"–í–≤–µ–¥—ñ—Ç—å {next_field}:")
        await update.message.reply_text(prompt)
        return ASKING
    else:
        mapping = ctx.user_data["form_values"]
        out_name = f"{uuid4().hex}.docx"
        out_path = os.path.join(OUTPUT_DIR, out_name)
        try:
            replace_placeholders_in_docx(TEMPLATE_PATH, mapping, out_path)
        except Exception as e:
            logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É.")
            return ConversationHandler.END

        contract_number = mapping.get("contract_number", "–±–µ–∑_–Ω–æ–º–µ—Ä—É").replace(":", ".").replace("/", ".").replace("\\",
                                                                                                                   ".")

        # –§–æ—Ä–º—É—î–º–æ –≥–∞—Ä–Ω—É –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
        file_name = f"‚Ññ{contract_number} –†–∞—Ö—É–Ω–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.docx"

        await update.message.reply_document(open(out_path, "rb"), filename=file_name)
        await update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–∫—É–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ:\nüìÑ {file_name}")

        return ConversationHandler.END


async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ ‚úÖ")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("form", form_start),
            MessageHandler(filters.Regex("^–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫üìã$"), form_start)
        ],
        states={
            ASKING: [MessageHandler(filters.TEXT & ~filters.COMMAND, form_ask)]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("^–°–∫–∞—Å—É–≤–∞—Ç–∏üî∏$"), cancel)
        ]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
